---
# Playbook to print inventory and group variables
#
# Defined variables in survey:
#
# target_version - firmware version to be upgraded to
# upgrade_filename - filename of the firmware 
#
- name: Print inventory and group variables in AWX
  hosts: all
  gather_facts: false
  tasks:

    # Task 1: Gather necessary facts
    - name: Gather facts from Cisco devices
      cisco.ios.ios_facts:
        gather_subset:
          - hardware
      register: facts

    - name: Display running version
      debug:
        msg: "Current version is {{ facts.ansible_facts.ansible_net_version }}"

    - name: Display target version captured from survey
      debug:
        msg: "Target version is {{ target_version }}"

    # Task 2: Check if the device requires upgrade by matching running version and upgrade version supplied by survey
    - name: Stop following tasks if the device does not need to upgrade
      fail:
        msg: "Device is already running the latest {{ target_version }} version. Upgrade procedure stops."
      when:
        - facts.ansible_facts.ansible_net_version == target_version

    # Assgin device_type variable. Later used for defining upgrade methods.
    - name: Assign device_type variable
      set_fact:
        device_type: "{{ ('router' if 'bootflash:' in facts.ansible_facts.ansible_net_image else 'switch') | trim }}"
      
    # The playbook supports IOS-XE upgrade in INSTALL mode or legacy device using boot system command
    # Check which mode is in use.
    - name: Run "show version" to check if the device is in INSTALL mode
      cisco.ios.ios_command:
        commands:
          - show version
      register: version_output
      when: device_type == 'switch'

    - name: Parse "show version" output for INSTALL mode
      set_fact:
        in_install_mode: "{{ 'INSTALL' in version_output.stdout[0] }}"
      when: device_type == 'switch'

    - name: Run "show run | inc boot" to check if the device is in INSTALL mode
      cisco.ios.ios_command:
        commands:
          - show version
      register: version_output
      when: device_type == 'router'

    - name: Parse "show run | inc boot" output for INSTALL mode
      set_fact:
        in_install_mode: "{{ 'packages.conf' in version_output.stdout[0] }}"
      when: device_type == 'router'

    - name: Display whether the device is in INSTALL mode
      debug:
        msg: "The device is in INSTALL mode: {{ in_install_mode }}"

    - name: Assign device_storage variable
      set_fact:
        device_storage: "{{ facts.ansible_facts.ansible_net_filesystems[0] }}"

    - name: Assign the device path and file for checking
      set_fact:
        device_file: "{{ device_storage }}{{ upgrade_filename }}"

    - block:
        # Task 3: Check if the file exists
        - name: Check if the file exists on the device
          cisco.ios.ios_command:
            commands: "dir {{ device_file }}"
          register: file_check
          ignore_errors: no  # Don't ignore errors here; use rescue to catch errors.

        # Task 4: Parse the file check result
        - name: Parse the file check result
          set_fact:
            file_exists: "{{ 'stdout' in file_check and 'No such file' not in file_check.stdout[0] }}"

      rescue:
        # Error handling: when file does not exist
        - name: Print error message
          debug:
            msg: "Error: File does not exist on host {{ inventory_hostname }}. Stopping upgrade procedure."

        # Stop all remaining tasks for this host
        - name: Fail the task and stop further tasks for this host if upgrade firmware does not exist
          fail:
            msg: "Stopping further tasks on host {{ inventory_hostname }} due to upgrade file not exist."

